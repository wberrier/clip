#!/usr/bin/env python3

"""clip: cli project development tool"""

import re
import sys
import json
import pprint
import os.path
import pathlib
import logging

# Development sys.path setup
# TODO: pythonic way to set this for development and installed tool?
sys.path.append(os.path.abspath(os.path.dirname(__file__) + os.sep + '../lib'))

import clip.config
import clip.common

# Set up some logging
LOG = logging.getLogger('clip')
LOG_HANDLER = logging.FileHandler(os.path.expanduser("~/.clip.log"))
LOG_HANDLER.setFormatter(logging.Formatter("%(asctime)s: %(levelname)s: %(message)s"))
LOG.addHandler(LOG_HANDLER)
LOG.setLevel(logging.DEBUG)


def get_proc_count():
    """ Get number of processors """
    if 'NUM_CORES_TO_USE' in os.environ:
        return int(os.environ['NUM_CORES_TO_USE'])

    count = 1
    for line in open("/proc/cpuinfo").readlines():
        if line.startswith("processor"):
            count += 1

    return count


def perform_substitutions(line, regex_map):
    """Generic function to exercise a bunch of regexes on some text"""

    for regex, new_text in regex_map.items():
        line = re.sub(regex, new_text, line)

    return line


def perform_array_substitutions(lines, regex_map):
    """Generic function to exercise a bunch of regexes on some lines of text"""

    new_lines = []

    for line in lines:
        new_line = line
        for regex, new_text in regex_map.items():
            new_line = re.sub(regex, new_text, line)
        new_lines.append(new_line)

    return new_lines


def get_config(config_dir=""):
    """This gets repeated a lot, have a common function"""

    if config_dir == "":
        config_dir = clip.config.get_config_dir()

    if config_dir == "":
        LOG.error("Unable to find " + clip.config.FILENAME)
        return ""

    # Read config file
    return clip.config.load_json_file(config_dir + os.sep + clip.config.FILENAME)


def command_build(subcommand_args):
    """main"""

    # Default build type
    build_type = "release"

    if len(subcommand_args) > 0:
        build_type = subcommand_args[0]

    config = get_config()
    config_dir = clip.config.get_config_dir()
    num_procs = get_proc_count()

    # Read config file
    pprint.pprint(config, stream=LOG_HANDLER.stream)

    # get command and replace core count
    command = config['build'][build_type]['command']
    working_dir = config_dir + os.path.sep + config['build'][build_type].get('working_dir', '.')
    command = command.replace("@NUM_CORES_TO_USE@", str(num_procs))

    if 'env' in config['build'][build_type]:
        env = config['build'][build_type]['env']
        clip.common.print_environment(env)
        clip.common.set_environment(env)

    LOG.debug("Command: " + command)

    # Run command
    os.chdir(working_dir)
    return os.WEXITSTATUS(os.system(command))


def command_debug(subcommand_args):
    """main"""

    config_dir = clip.config.get_config_dir()

    # Read config file
    config = get_config()

    working_dir = config['debug'].get('working_dir', '.')

    gdb_command = config['debug'].get('gdb', 'gdb')
    gdb_args = config['debug'].get('gdb_args', '')

    program = config['debug']['program']
    program_args = config['debug'].get('program_args', '')

    command = gdb_command + " " + gdb_args + " -i=mi --args " + program + " " + program_args

    if 'env' in config['debug']:
        env = config['debug']['env']
        clip.common.set_environment(env)

    # For logging (careful not to print anything out or else it will mess up gdb machine interface)
    LOG.debug("Running: " + command)

    # Run debug command
    os.chdir(config_dir + os.sep + working_dir)
    return os.WEXITSTATUS(os.system(command))


def command_generate_cdb(subcommand_args, file_writer=sys.stdout):
    """ 'Schema' found here: http://clang.llvm.org/docs/JSONCompilationDatabase.html"""

    # Try to read config file
    config = get_config()
    config_dir = clip.config.get_config_dir()

    # get values (with some fallback defaults)
    working_dir = config['compile-commands'].get('working_dir', 'build')
    override_compiler = config['compile-commands'].get('override_compiler', False)
    ignore_args = config['compile-commands'].get('ignore_args', [''])

    # Process some filter regexes
    filter_regexes = config['compile-commands'].get('filter_regexes', {})
    directory_filter_regexes = config['compile-commands'].get('directory_filter_regexes', {})
    file_filter_regexes = config['compile-commands'].get('file_filter_regexes', {})
    command_filter_regexes = config['compile-commands'].get('command_filter_regexes', {})
    arguments_filter_regexes = config['compile-commands'].get('arguments_filter_regexes', {})
    output_filter_regexes = config['compile-commands'].get('output_filter_regexes', {})

    # Default if not set in config file
    compile_commands_files = config['compile-commands'].get('files', ['compile_commands.json'])

    complete_commands_db = []

    current_dir = os.getcwd()

    os.chdir(config_dir)

    for compile_commands_file in compile_commands_files:

        with open(os.path.join(config_dir, working_dir, compile_commands_file)) as descriptor:

            commands_db = json.load(descriptor)

            for entry in commands_db:

                # Perform all filter regexs
                for i in ['directory', 'file']:
                    entry[i] = perform_substitutions(entry[i], filter_regexes)

                entry['directory'] = perform_substitutions(entry['directory'], directory_filter_regexes)
                entry['file'] = perform_substitutions(entry['file'], file_filter_regexes)

                # This field is optional
                if 'output' in entry:
                    entry['output'] = perform_substitutions(entry['output'], filter_regexes)
                    entry['output'] = perform_substitutions(entry['output'], output_filter_regexes)

                # Entry must have either command or arguments
                args = []
                has_command = True
                if 'command' in entry:
                    entry['command'] = perform_substitutions(entry['command'], filter_regexes)
                    entry['command'] = perform_substitutions(entry['command'], command_filter_regexes)

                    args = entry['command'].split()

                # Handle arguments separately, since it's an array
                elif 'arguments' in entry:
                    entry['arguments'] = perform_array_substitutions(entry['arguments'], filter_regexes)
                    entry['arguments'] = perform_array_substitutions(entry['arguments'], arguments_filter_regexes)

                    args = entry['arguments']
                    has_command = False
                else:
                    LOG.error("Invalid compile_commands.json: {}".format(compile_commands_file))
                    # TODO: better way to handle this error?
                    sys.exit(1)

                new_args = []

                # Sanitize compile_commands.json
                for arg in args:

                    if override_compiler:
                        if arg.endswith("gcc"):
                            arg = "clang"
                        elif arg.endswith("g++"):
                            arg = "clang++"

                    if arg not in ignore_args:
                        new_args.append(arg)

                if has_command:
                    entry['command'] = " ".join(new_args)
                else:
                    entry['arguments'] = new_args

                complete_commands_db.append(entry)

    json.dump(complete_commands_db, file_writer)

    # Return to the original dir
    os.chdir(current_dir)

    return 0


def check_common_db_dirs():

    dirs = ['build-debug', 'build-cross', 'build-release', 'build', '.']

    for d in dirs:
        d_test = "{}/{}".format(d, 'compile_commands.json')
        if os.path.exists(d_test):
            return d

    return None


def command_start_clangd(subcommand_args):

    config = get_config()

    command_args = ""

    if config != "":
        working_dir = config['compile-commands'].get('working_dir', 'build')

        # change to the config dir, since that's what the expected paths will point to
        config_dir = clip.config.get_config_dir()
        os.chdir(config_dir)

        new_db_dir = working_dir + os.sep + "clip"
        new_db_file = new_db_dir + os.sep + "compile_commands.json"

        pathlib.Path(new_db_dir).mkdir(parents=True, exist_ok=True)

        new_db_fd = open(new_db_file, 'w')
        LOG.info("writing compilation database to: {}/{}".format(config_dir, new_db_file))
        command_generate_cdb([], new_db_fd)
        new_db_fd.close()

        command_args = "-compile-commands-dir {}".format(new_db_dir)
    else:
        # Check for some common locations
        db_dir = check_common_db_dirs()
        if db_dir:
            command_args = "-compile-commands-dir " + db_dir

    # Start up clangd with the appropriate arguments
    command = "clangd --log=info {}".format(command_args)
    LOG.info("Starting clangd in {} with: {}".format(os.getcwd(), command))
    return os.WEXITSTATUS(os.system(command))


def usage():
    usage_text = """

./clip <sub command> <sub command arguments>

 Sub commands:

  build
  debug
  generate-compile-db <directory>
  start-clangd

"""
    print(usage_text)


def main():

    try:
        subcommand = sys.argv[1]
        subcommand_args = sys.argv[2:]
    except IndexError:
        usage()
        return 1

    ret = 0

    if 'build' == subcommand:
        ret = command_build(subcommand_args)
    elif 'debug' == subcommand:
        ret = command_debug(subcommand_args)
    elif 'generate-compile-db' == subcommand:
        ret = command_generate_cdb(subcommand_args)
    elif 'start-clangd' == subcommand:
        ret = command_start_clangd(subcommand_args)
    # TODO: execute clip-subcommand if it exists in the path
    else:
        usage()
        ret = 1

    return ret


if __name__ == "__main__":
    sys.exit(main())
