#!/usr/bin/env python

import os
import re
import sys
import commands
import getopt

import pdb

# Command line parsing
build_dir = "build"

opts, remaining_args = getopt.gnu_getopt(sys.argv[1:], "", [ "build_dir=" ])
for option, value in opts:
    if option == "--build_dir":
        build_dir= value

# Allow build directories like this: el6-x86_64
(code, dist) = commands.getstatusoutput("get_dist")

# Try these in order
build_dirs = [
    build_dir + "-" + dist,
    build_dir,
]

def getBuildDir():
    # walk up tree to find a "build" directory
    curdir = os.getcwd()
    while curdir != "/":

        for b in build_dirs:

            test_dir = curdir + "/" + b
            if os.path.exists(test_dir):
                return test_dir

        curdir = os.path.dirname(curdir)

def getBuildTool(build_dir):
    # with cmake 2.8, you can just call "cmake --build <dir>"
    # but with 2.6, we have to inspect CMakeCache.txt
    cache_filename = build_dir + "/CMakeCache.txt"

    if not os.path.exists(cache_filename):
        print "Unable to find build dir"
        sys.exit(1)

    cache = open(cache_filename).read()

    for line in cache.split("\n"):
        matches = re.search("^CMAKE_MAKE_PROGRAM.*=(.*)", line)

        if matches:
            return matches.group(1)

    # default to make
    return "make"

def getProcCount():
    """ Get number of processors + 1"""
    if os.environ.has_key('BUILD_NUM_PROCESSORS'):
        return int(os.environ['BUILD_NUM_PROCESSORS'])

    count = 1
    for line in open("/proc/cpuinfo").readlines():
        if line.startswith("processor"):
            count += 1

    return count

full_build_dir = getBuildDir()
build_tool = getBuildTool(full_build_dir)
#print("Build directory: " + full_build_dir)
#print("Build tool: " + build_tool)
#sys.exit(1)

num_procs = getProcCount()
#num_procs = 1

os.system(("%s -j%d -C %s" % (build_tool, num_procs, full_build_dir)) + " ".join(remaining_args))
