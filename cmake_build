#!/usr/bin/env python

import os
import re
import sys
import commands

import pdb

(code, dist) = commands.getstatusoutput("get_dist")

# Try these in order
# TODO: handle debug builds via command line parameter?
build_dirs = ["build-" + dist, "build-cross-" + dist, "build", "build-cross"]

def getBuildDir():
    # walk up tree to find a "build" directory
    curdir = os.getcwd()
    while curdir != "/":

        for b in build_dirs:

            test_dir = curdir + "/" + b
            if os.path.exists(test_dir):
                return test_dir

        curdir = os.path.dirname(curdir)

def getBuildTool(build_dir):
    # with cmake 2.8, you can just call "cmake --build <dir>"
    # but with 2.6, we have to inspect CMakeCache.txt
    cache = open(build_dir + "/CMakeCache.txt").read()

    for line in cache.split("\n"):
        matches = re.search("^CMAKE_MAKE_PROGRAM.*=(.*)", line)

        if matches:
            return matches.group(1)

    # default to make
    return "make"

def getProcCount():
    """ Get number of processors + 1"""
    if os.environ.has_key('BUILD_NUM_PROCESSORS'):
        return int(os.environ['BUILD_NUM_PROCESSORS'])

    count = 1
    for line in open("/proc/cpuinfo").readlines():
        if line.startswith("processor"):
            count += 1

    return count

full_build_dir = getBuildDir()
build_tool = getBuildTool(full_build_dir)
#print("Build directory: " + full_build_dir)
#print("Build tool: " + build_tool)
#sys.exit(1)

num_procs = getProcCount()
#num_procs = 1

os.chdir(full_build_dir)
os.system(("%s -j%d" % (build_tool, num_procs)) + " ".join(sys.argv[1:]))
